<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2a 第九組網站: <a href="https://mdecd2025.github.io/2a-ag9/content/index.html">https://mdecd2025.github.io/2a-ag9/content/index.html</a> </p>
<p>2a 第九組倉儲: <a href="https://github.com/mdecd2025/2a-ag9">https://github.com/mdecd2025/2a-ag9</a> </p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Task</h1>
<h2>task5</h2>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/task5.html">https://mdecd2025.github.io/hw-scrum-1/content/task5.html</a></p>
<p>1.請用繁體中文詳細說明下列資料:<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></p>
<p>2.請整理<span> </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a><span> </span>中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</p>
<p>3.請摘要出下列內容: (放入英文文章內容)</p>
<p>4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</p>
<p>5.請詳細說明如何採手動方式在 Webots 建立下列場景:</p>
<p>6.希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</p>
<h3>1.</h3>
<p>Webots 是由 Cyberbotics Ltd. 開發的開源、多平台 3D 機器人模擬器，廣泛應用於工業、教育和研究領域。 </p>
<p><span style="color: #000000; background-color: #ffff00;">主要特點</span><strong>：</strong></p>
<ul>
<li>
<p><strong>跨平台支持</strong>：Webots 可在 Windows、Linux 和 macOS 等多個平台上運行，滿足不同使用者的需求。 </p>
</li>
<li>
<p><strong>多語言編程</strong>：使用者可使用 C、C++、Python、Java、MATLAB 等語言編寫機器人控制程式，提供靈活的開發環境。</p>
</li>
<li>
<p><strong>高擬真度物理模擬</strong>：Webots 使用 ODE（Open Dynamics Engine）來檢測碰撞並模擬剛體動力學，精確模擬物體的速度、慣性和摩擦等物理特性。</p>
</li>
<li>
<p><strong>豐富的感測器與致動器支持</strong>：如 LIDAR、雷達、接近感測器、光感測器、觸覺感測器、GPS、加速度計、攝影機、發射器和接收器、伺服馬達（旋轉和線性）、位置和力感測器、LED、夾持器、陀螺儀、指南針、IMU 等。</p>
</li>
<li>
<p><strong>內建多種機器人模型</strong>：包括 AIBO、NAO、Pioneer 等，方便使用者直接使用或修改。 </p>
</li>
</ul>
<p><span style="background-color: #ffff00;">應用領域</span><strong>：</strong></p>
<ul>
<li>
<p><strong>快速原型設計</strong>：適用於輪式和足式機器人的快速原型設計。</p>
</li>
<li>
<p><strong>機器人運動研究</strong>：用於研究機器人的運動模式和控制策略。</p>
</li>
<li>
<p><strong>群體智能</strong>：進行多機器人協作和群體行為模擬。 </p>
</li>
<li>
<p><strong>人工生命與進化機器人學</strong>：模擬自適應行為和自我重構模組化機器人。 </p>
</li>
<li>
<p><strong>計算機視覺實驗環境</strong>：提供計算機視覺算法的測試平台。 </p>
</li>
<li>
<p><strong>教學與機器人編程競賽</strong>：廣泛應用於教育領域和各類機器人競賽。 </p>
</li>
</ul>
<p>總而言之，Webots 作為一款功能強大的機器人模擬器，為使用者提供了從設計到測試的全方位工具，廣泛應用於工業、教育和研究領域。</p>
<p>擷取自ChatGPT</p>
<h3>2.</h3>
<p data-end="133" data-start="87">這些是文章裡常見的重要詞彙和短語，它們可以幫助你更容易理解 Webots 的功能和應用。</p>
<ul data-end="1645" data-start="135" style="list-style-type: circle;">
<li data-end="215" data-start="135">
<p data-end="215" data-start="138"><strong data-end="173" data-start="138">robot</strong><strong> simulation</strong><strong data-end="173" data-start="138"> software suite</strong> - 機器人模擬軟體套件<br data-end="188" data-start="185"/> → 這是一整套專門用來模擬機器人的軟體工具。</p>
</li>
<li data-end="306" data-start="217">
<p data-end="306" data-start="220"><strong data-end="253" data-start="220">rapid prototyping environment</strong> - 快速原型環境<br data-end="265" data-start="262"/> → 讓使用者可以快速建立和測試機器人的虛擬模型，不用真的去造一台機器人。</p>
</li>
<li data-end="382" data-start="308">
<p data-end="382" data-start="311"><strong data-end="334" data-start="311">physical properties</strong> - 物理特性<br data-end="344" data-start="341"/> → 指機器人在模擬環境中的物理行為，比如重量、摩擦力、關節運動等。</p>
</li>
<li data-end="447" data-start="384">
<p data-end="447" data-start="387"><strong data-end="405" data-start="387">motion schemes</strong> - 運動方案<br data-end="415" data-start="412"/> → 機器人的移動方式，比如輪子、雙腿行走，甚至是飛行。</p>
</li>
<li data-end="548" data-start="449">
<p data-end="548" data-start="452"><strong data-end="477" data-start="452">sensors and actuators</strong> - 感測器和執行器<br data-end="490" data-start="487"/> → 感測器負責蒐集環境資訊 (像是距離感測器、攝影機)，而執行器則讓機器人執行動作 (像是馬達、驅動輪)。</p>
</li>
<li data-end="663" data-start="550">
<p data-end="663" data-start="553"><strong data-end="601" data-start="553">robot models and controller program examples</strong> - 機器人模型與控制器程式範例<br data-end="620" data-start="617"/> → Webots 裡已經有很多現成的機器人範例和控制程式，讓新手更容易上手。</p>
</li>
<li data-end="763" data-start="665">
<p data-end="763" data-start="668"><strong data-end="705" data-start="668">interface with real mobile robots</strong> - 與真實移動機器人的接口<br data-end="722" data-start="719"/> → Webots 不只是模擬，還可以讓你的程式實際控制真實世界的機器人！</p>
</li>
<li data-end="858" data-start="765">
<p data-end="858" data-start="768"><strong data-end="798" data-start="768">adaptive behavior research</strong> - 自適應行為研究<br data-end="811" data-start="808"/> → 研究如何讓機器人能夠適應不同的環境，比如用 AI 讓它學習如何走路或避開障礙物。</p>
</li>
<li data-end="923" data-start="860">
<p data-end="923" data-start="863"><strong data-end="885" data-start="863">genetic algorithms</strong> - 遺傳演算法<br data-end="896" data-start="893"/> → 靠著類似生物演化的方式來優化機器人行為。</p>
</li>
<li data-end="997" data-start="925">
<p data-end="997" data-start="929"><strong data-end="948" data-start="929">neural networks</strong> - 神經網路<br data-end="958" data-start="955"/> → 一種模仿人類大腦學習方式的 AI 技術，可以讓機器人學習和決策。</p>
</li>
<li data-end="1080" data-start="999">
<p data-end="1080" data-start="1003"><strong data-end="1035" data-start="1003">artificial intelligence (AI)</strong> - 人工智慧<br data-end="1045" data-start="1042"/> → 讓機器人變得更聰明，能夠自己做決定，而不只是照指令執行。</p>
</li>
<li data-end="1163" data-start="1082">
<p data-end="1163" data-start="1086"><strong data-end="1110" data-start="1086">3D computer graphics</strong> - 3D 電腦圖形學<br data-end="1124" data-start="1121"/> → 用來設計 Webots 世界裡的機器人和環境，讓它看起來更真實。</p>
</li>
<li data-end="1279" data-start="1165">
<p data-end="1279" data-start="1169"><strong data-end="1215" data-start="1169">virtual reality modeling language (VRML97)</strong> - 虛擬實境建模語言 (VRML97)<br data-end="1238" data-start="1235"/> → 這是一種專門用來建立 3D 模型的語言，在 Webots 裡很有用！</p>
</li>
<li data-end="1380" data-start="1281">
<p data-end="1380" data-start="1285"><strong data-end="1316" data-start="1285">GitHub Discussions / Issues</strong> - GitHub 討論區 / 問題回報<br data-end="1339" data-start="1336"/> → 如果你在 Webots 遇到問題，可以到這些地方請求幫助或回報錯誤。</p>
</li>
<li data-end="1448" data-start="1382">
<p data-end="1448" data-start="1386"><strong data-end="1407" data-start="1386">robot controllers</strong> - 機器人控制器<br data-end="1419" data-start="1416"/> → 這是讓機器人運作的核心程式，就像是它的大腦。</p>
</li>
<li data-end="1554" data-start="1450">
<p data-end="1554" data-start="1454"><strong data-end="1479" data-start="1454">privileged operations</strong> - 特權操作<br data-end="1489" data-start="1486"/> → 一些只有「主管控制器」(Supervisor Controller) 才能執行的特殊操作，比如隨機移動機器人或錄影。</p>
<p data-end="1554" data-start="1454"></p>
<p><span><strong>1.Webots is a professional mobile robot simulation software suite.</strong></span></p>
<p><span><strong></strong></span><span>Webots (</span>主詞<span>) </span></p>
<p><span>is (</span>動詞，表示狀態<span>) </span></p>
<p><span>a professional mobile robot simulation software suite (</span>補語，名詞片語<span>) </span></p>
<p> 翻譯<span> &amp; </span>解釋 「<span>Webots </span>是一款專業的移動機器人模擬軟體套件。」 這句話很簡單，就是在介紹<span> Webots </span>是什麼。它的結構是標準的「主詞<span> + be </span>動詞<span> + </span>名詞補語」，描述<span> Webots </span>的特性。</p>
<p></p>
<p><span><strong>2.It provides a rapid prototyping environment that allows users to create a 3D virtual world with physical properties such as mass, joints, and friction coefficients.</strong></span></p>
<p><span> It (</span>主詞，指<span> Webots) </span></p>
<p><span>provides (</span>動詞，提供<span>) </span></p>
<p><span>a rapid prototyping environment (</span>受詞，快速原型環境<span>)</span></p>
<p><span> that allows users to create a 3D virtual world (</span>關係子句，修飾<span> "environment") </span></p>
<p><span>with physical properties such as mass, joints, and friction coefficients (</span>介系詞片語，描述這個<span> 3D </span>世界的特性<span>) </span></p>
<p><span></span>翻譯<span> &amp; </span>解釋 「它提供了一個快速原型環境，讓使用者可以建立具有物理特性的<span> 3D </span>虛擬世界，例如質量、關節、摩擦係數等。」 這句話稍微長一點，其中的<span> "that allows..." </span>是關係子句，修飾<span> "environment"</span>，表示這個環境的用途。</p>
<p><strong> 3. These robots can have different motion schemes, such as wheeled robots, legged robots, or flying robots. </strong></p>
<p><span>These robots (</span>主詞，這些機器人<span>) </span></p>
<p><span>can have (</span>助動詞<span> + </span>動詞，能夠擁有<span>)</span></p>
<p><span> different motion schemes (</span>受詞，不同的運動方案<span>)</span></p>
<p><span> such as wheeled robots, legged robots, or flying robots (</span>介系詞片語，舉例不同的機器人類型<span>) </span></p>
<p>翻譯<span> &amp; </span>解釋 「這些機器人可以有不同的運動方式，例如輪式機器人、腿式機器人或飛行機器人。」<span> "such as" </span>是用來舉例的，讓句子更清楚。</p>
<p></p>
<p><span><strong>4.When the simulation starts, Webots launches the specified controller as a separate process and associates the controller process with the simulated robot.</strong></span></p>
<p><span><strong></strong> Webots (</span>主詞<span>)</span></p>
<p><span> launches (</span>動詞，啟動<span>)</span></p>
<p><span> the specified controller (</span>受詞，指定的控制器<span>) </span></p>
<p><span>as a separate process (</span>介系詞片語，表示控制器是獨立運作的<span>)</span></p>
<p><span> and associates the controller process with the simulated robot (</span>並列動作，把控制器跟模擬機器人連接起來<span>)</span></p>
<p><span> </span> 翻譯<span> &amp; </span>解釋 「當模擬開始時，<span>Webots </span>會啟動指定的控制器作為獨立進程，並將它與模擬機器人關聯起來。」 這句話描述<span> Webots </span>怎麼管理機器人的控制程式。<span>"When..." </span>是時間從句，表示這個動作何時發生。</p>
</li>
</ul><h3>3.</h3>
<h3>4.</h3>
<h3>5.</h3>
<h3>6.</h3>
<h1>W3</h1>
<h1>list</h1>
<p>網站：</p>
<p>41223112：</p>
<p>41223120：</p>
<p>41223146：</p>
<p>41223152：</p>
<p>41223153：</p>
<hr/>
<p>倉儲：</p>
<p>41223112：</p>
<p>41223120：</p>
<p>41223146：</p>
<p>41223152：</p>
<p>41223153：</p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>