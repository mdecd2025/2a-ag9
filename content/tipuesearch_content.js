var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 2a 第九組網站:\xa0 https://mdecd2025.github.io/2a-ag9/content/index.html \xa0 \n 2a 第九組倉儲:\xa0 https://github.com/mdecd2025/2a-ag9 \xa0 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Task', 'text': '', 'tags': '', 'url': 'Task.html'}, {'title': 'task5', 'text': 'https://mdecd2025.github.io/hw-scrum-1/content/task5.html \n 1.請用繁體中文詳細說明下列資料: \xa0 https://cyberbotics.com/doc/guide/introduction-to-webots\xa0 \n 2.請整理 \xa0 https://cyberbotics.com/doc/guide/introduction-to-webots \xa0 中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明. \n 3.請摘要出下列內容: (放入英文文章內容) \n 4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法: \n 5.請詳細說明如何採手動方式在 Webots 建立下列場景: \n 6.希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意? \n', 'tags': '', 'url': 'task5.html'}, {'title': '1.', 'text': 'Webots 是由 Cyberbotics Ltd. 開發的開源、多平台 3D 機器人模擬器，廣泛應用於工業、教育和研究領域。\xa0 \n 主要特點 ： \n \n \n 跨平台支持 ：Webots 可在 Windows、Linux 和 macOS 等多個平台上運行，滿足不同使用者的需求。\xa0 \n \n \n 多語言編程 ：使用者可使用 C、C++、Python、Java、MATLAB 等語言編寫機器人控制程式，提供靈活的開發環境。 \n \n \n 高擬真度物理模擬 ：Webots 使用 ODE（Open Dynamics Engine）來檢測碰撞並模擬剛體動力學，精確模擬物體的速度、慣性和摩擦等物理特性。 \n \n \n 豐富的感測器與致動器支持 ：如 LIDAR、雷達、接近感測器、光感測器、觸覺感測器、GPS、加速度計、攝影機、發射器和接收器、伺服馬達（旋轉和線性）、位置和力感測器、LED、夾持器、陀螺儀、指南針、IMU 等。 \n \n \n 內建多種機器人模型 ：包括 AIBO、NAO、Pioneer 等，方便使用者直接使用或修改。\xa0 \n \n \n 應用領域 ： \n \n \n 快速原型設計 ：適用於輪式和足式機器人的快速原型設計。 \n \n \n 機器人運動研究 ：用於研究機器人的運動模式和控制策略。 \n \n \n 群體智能 ：進行多機器人協作和群體行為模擬。\xa0 \n \n \n 人工生命與進化機器人學 ：模擬自適應行為和自我重構模組化機器人。\xa0 \n \n \n 計算機視覺實驗環境 ：提供計算機視覺算法的測試平台。\xa0 \n \n \n 教學與機器人編程競賽 ：廣泛應用於教育領域和各類機器人競賽。\xa0 \n \n \n 總而言之，Webots 作為一款功能強大的機器人模擬器，為使用者提供了從設計到測試的全方位工具，廣泛應用於工業、教育和研究領域。 \n 擷取自ChatGPT \n', 'tags': '', 'url': '1..html'}, {'title': '2.', 'text': '這些是文章裡常見的重要詞彙和短語，它們可以幫助你更容易理解 Webots 的功能和應用。 \n \n \n robot  simulation  software suite  - 機器人模擬軟體套件  → 這是一整套專門用來模擬機器人的軟體工具。 \n \n \n rapid prototyping environment  - 快速原型環境  → 讓使用者可以快速建立和測試機器人的虛擬模型，不用真的去造一台機器人。 \n \n \n physical properties  - 物理特性  → 指機器人在模擬環境中的物理行為，比如重量、摩擦力、關節運動等。 \n \n \n motion schemes  - 運動方案  → 機器人的移動方式，比如輪子、雙腿行走，甚至是飛行。 \n \n \n sensors and actuators  - 感測器和執行器  → 感測器負責蒐集環境資訊 (像是距離感測器、攝影機)，而執行器則讓機器人執行動作 (像是馬達、驅動輪)。 \n \n \n robot models and controller program examples  - 機器人模型與控制器程式範例  → Webots 裡已經有很多現成的機器人範例和控制程式，讓新手更容易上手。 \n \n \n interface with real mobile robots  - 與真實移動機器人的接口  → Webots 不只是模擬，還可以讓你的程式實際控制真實世界的機器人！ \n \n \n adaptive behavior research  - 自適應行為研究  → 研究如何讓機器人能夠適應不同的環境，比如用 AI 讓它學習如何走路或避開障礙物。 \n \n \n genetic algorithms  - 遺傳演算法  → 靠著類似生物演化的方式來優化機器人行為。 \n \n \n neural networks  - 神經網路  → 一種模仿人類大腦學習方式的 AI 技術，可以讓機器人學習和決策。 \n \n \n artificial intelligence (AI)  - 人工智慧  → 讓機器人變得更聰明，能夠自己做決定，而不只是照指令執行。 \n \n \n 3D computer graphics  - 3D 電腦圖形學  → 用來設計 Webots 世界裡的機器人和環境，讓它看起來更真實。 \n \n \n virtual reality modeling language (VRML97)  - 虛擬實境建模語言 (VRML97)  → 這是一種專門用來建立 3D 模型的語言，在 Webots 裡很有用！ \n \n \n GitHub Discussions / Issues  - GitHub 討論區 / 問題回報  → 如果你在 Webots 遇到問題，可以到這些地方請求幫助或回報錯誤。 \n \n \n robot controllers  - 機器人控制器  → 這是讓機器人運作的核心程式，就像是它的大腦。 \n \n \n privileged operations  - 特權操作  → 一些只有「主管控制器」(Supervisor Controller) 才能執行的特殊操作，比如隨機移動機器人或錄影。 \n \n 1.Webots is a professional mobile robot simulation software suite. \n Webots ( 主詞 )  \n is ( 動詞，表示狀態 )  \n a professional mobile robot simulation software suite ( 補語，名詞片語 )  \n \xa0翻譯  &  解釋 「 Webots  是一款專業的移動機器人模擬軟體套件。」 這句話很簡單，就是在介紹  Webots  是什麼。它的結構是標準的「主詞  + be  動詞  +  名詞補語」，描述  Webots  的特性。 \n \n 2.It provides a rapid prototyping environment that allows users to create a 3D virtual world with physical properties such as mass, joints, and friction coefficients. \n \xa0It ( 主詞，指  Webots)  \n provides ( 動詞，提供 )  \n a rapid prototyping environment ( 受詞，快速原型環境 ) \n \xa0that allows users to create a 3D virtual world ( 關係子句，修飾  "environment")  \n with physical properties such as mass, joints, and friction coefficients ( 介系詞片語，描述這個  3D  世界的特性 )  \n 翻譯  &  解釋 「它提供了一個快速原型環境，讓使用者可以建立具有物理特性的  3D  虛擬世界，例如質量、關節、摩擦係數等。」 這句話稍微長一點，其中的  "that allows..."  是關係子句，修飾  "environment" ，表示這個環境的用途。 \n  3. These robots can have different motion schemes, such as wheeled robots, legged robots, or flying robots.  \n These robots ( 主詞，這些機器人 )  \n can have ( 助動詞  +  動詞，能夠擁有 ) \n \xa0different motion schemes ( 受詞，不同的運動方案 ) \n \xa0such as wheeled robots, legged robots, or flying robots ( 介系詞片語，舉例不同的機器人類型 )  \n 翻譯  &  解釋 「這些機器人可以有不同的運動方式，例如輪式機器人、腿式機器人或飛行機器人。」  "such as"  是用來舉例的，讓句子更清楚。 \n \n 4.When the simulation starts, Webots launches the specified controller as a separate process and associates the controller process with the simulated robot. \n \xa0Webots ( 主詞 ) \n  launches ( 動詞，啟動 ) \n \xa0the specified controller ( 受詞，指定的控制器 )  \n as a separate process ( 介系詞片語，表示控制器是獨立運作的 ) \n \xa0and associates the controller process with the simulated robot ( 並列動作，把控制器跟模擬機器人連接起來 ) \n \xa0 \xa0翻譯  &  解釋 「當模擬開始時， Webots  會啟動指定的控制器作為獨立進程，並將它與模擬機器人關聯起來。」 這句話描述  Webots  怎麼管理機器人的控制程式。 "When..."  是時間從句，表示這個動作何時發生。 \n \n \n', 'tags': '', 'url': '2..html'}, {'title': '3.', 'text': '', 'tags': '', 'url': '3..html'}, {'title': '4.', 'text': '', 'tags': '', 'url': '4..html'}, {'title': '5.', 'text': '', 'tags': '', 'url': '5..html'}, {'title': '6.', 'text': '', 'tags': '', 'url': '6..html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': 'HW1', 'text': '41223112 \n 41223120 \n /downloads/41223120_HW1.7z \n \n 心得:建立四連桿的過程中需要非常的注意每個步驟，像是一開始要先暫停先固定一個座標，這樣後續的數值才不會全部都要重調，還有自己很有感悟的是在方塊的行程和座標的定位需要很有耐心的調整，最後程式要模擬也很重要不能用錯地方不能只要有一個地方用錯就全部都動不了了。 \n 41223123 \n 41223123_HW1 \n \n 41223146 \n 41223146HW1.7z \n 41223152 \n 41223152HW1.7z \n \n 41223153 \n 41223153HW1.7z \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '41223112 \n 41223120 \n /downloads/41223120_HW2.7z \n \n 心得：第二個作業需要，用零件然後導入，很重要的地方就是自己要弄自己了解的檔名，不然用到後面會亂掉，還有座標要自己先喬好，不然後面數值全部大不同，自己有漸漸了解webots 在做什麼，然後要在熟悉一點裡面的操作模式，這樣才能漸入佳境 \n 41223123 \n 4122123_HW2 \n \n 41223146 \n 41223146HW2.7z \n \n 41223152 \n 41223152HW2.7z \n \n \n 41223153 \n 41223153HW2.7z \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '41223112 \n 41223120 \n /downloads/41223120_HW3.7z \n \n 作業流程：一開始有很多零件要叫出來：然後不能叫錯零件，因為會變的非常奇怪，我中間都做的蠻順利的，還有改自己喜歡的顏色。 心得：我自己覺得做了比較多作業之後有得心應手一點，但是程式的轉換還是有點不熟需要請教同學，然後最後我有個力用錯，然後球彈一下就掉下去了，但後來有去檢查零件和參數，修改之後還是沒有改變，後來先存檔重開一次，就可以正常彈跳了，後來發現有改對的話，重開就會變正常。 \n 41223123 \n 41223123_HW3 \n \n 41223146 \n 41223146HW3.7z \n \n 41223152 \n 41223152HW3.7z \n https://youtube.com/shorts/Bzs8pK4jg4Y?si=LNYi3opykXmhJhN2 \n 41223153 \n 41223153HW3.7z \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Exam1', 'text': '41223112 \n 41223120 \n /downloads/41223120_Exam1.7z \n \n 作業流程：這題有點像是前面四連桿的延伸，一開始先設定第一根連桿，後續以此類推，唯一不一樣的是有個地方solvespace 先畫一個連桿形狀然後，角度要用學號的後兩碼，在後兩個角度改徑度之後，就可以加到連桿參數的某個地方，後面操作都是非常需要細心的東西 \n 心得：我覺得這題他的連桿變得很不一樣，在joint 的部分，需要放多一點心，不然按錯後面就都要重新檢查，然後有越來越進入webots 的狀態了，就是越來越知道怎麼操作了 \n 41223123 \n 41223123_Exam1 \n \n 41223146 \n 41223146 exam-1.7z \n \n 41223152 \n 41223152-Exam3-1.7z \n \n 41223153 \n 41223153Exam1.7z \n \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': '41223112 \n 41223120 \n /downloads/41223120_Exam2.7z \n \n 作業流程:一開始先畫Slovespace檔案，然後改自己學號，到組合件的部分要檢查每個接點，回到Webots的時候，要修改四個接點的座標，然後都改好之後存檔再啟動，就可以正常運作了，中間要補充一下，有個地方要拉OBJ檔，去小白窗，再去小黑窗打pip instate，在小黑窗去tool然後go。 \n 心得:我覺得角度每個學號有點不一樣，操作起來很酷，然後這種有座標的作業要比較細心，之後就可以比較得心應手了。 \n 41223123 \n 41223123_Exam2 \n \n 41223146 \n 41223146 exam-2.7z \n \n 41223152 \n \n 41223153 \n 41223153Exam2.7z \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3-1', 'text': '41223112 \n 41223120 \n /downloads/41223120-Exam3-1.zip \n \n 題目一心得:一開始先用IPV6，然後用小黑窗開Webots，然後用小白窗，一個人選客戶端一個人選服務端，然後把檔案拖到小白窗，在改服務端的學號， 瀏覽器檢視啟動串流學員伺服器上的機構模擬，同步後代表完成。 \n 41223123 \n \n 41223146 \n \n 41223152 \n \n 41223153 \n \n', 'tags': '', 'url': 'Exam3-1.html'}, {'title': 'Exam3-2', 'text': '41223112 \n 41223120 \n /downloads/41223120-Exam3-2.zip \n \n 題目二:前面步驟同上，直到服務端要加入全部組員的學號，然後客戶端要改服務端的學號，然後七段顯示器進行修改。 \n 41223123 \n \n 41223146 \n \n 41223152 \n 41223152-Exam3-2.7z \n 41223152-Exam3-2-w14.7z \n \n 41223153 \n', 'tags': '', 'url': 'Exam3-2.html'}, {'title': 'Exam3-3', 'text': '41223112 \n 41223120 \n /downloads/41223152-Exam3-3.7z \n \n 題目三:組員的電腦中， 透過 Websocket 客戶端程式控制平台車的前進、後退與左右轉。 \n 41223123 \n \n 41223146 \n \n 41223152 \n 41223152-Exam3-3.7z \n \n 41223153 \n \n', 'tags': '', 'url': 'Exam3-3.html'}, {'title': 'list', 'text': '網站： \n 41223112： https://mdecd2025.github.io/hw-WSE41223112/content/index.html \xa0 \n 41223120： https://mdecd2025.github.io/hw-41223120/content/index.html \xa0 \n 41223123: https://mdecd2025.github.io/hw-G8People/content/index.html \n 41223146： https://mdecd2025.github.io/hw-41223146/ \n 41223152： https://mdecd2025.github.io/hw-41223152/content/index.html \xa0 \n 41223153： https://mdecd2025.github.io/hw-41223153/content/index.html \xa0 \n \n 倉儲： \n 41223112： https://github.com/mdecd2025/hw-WSE41223112 \xa0 \n 41223120： https://github.com/mdecd2025/hw-41223120 \xa0 \n 41223123: https://github.com/mdecd2025/hw-G8People \n 41223146： https://github.com/mdecd2025/hw-41223146 \xa0 \n 41223152： https://github.com/mdecd2025/hw-41223152 \xa0 \n 41223153： https://github.com/mdecd2025/hw-41223153 \xa0', 'tags': '', 'url': 'list.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n 期末檔案: Shootcar-Project.pdf \n \n Webots檔案: /downloads/cd2025_final_41223120.zip \n \n \n \n 心得: \n 一開始先做球數定量限制的部分，用原本的生成球程式來進行修改，保留原本透過按鍵來生成球的部分，另外再讓ChatGPT幫我加入，生成球數的限制，當總生成球數等於10球時，送出訊息[遊戲結束，已投出10球]，並停止按鍵生成球的功能，來達到意義上的定量限制，當然也能更改成更多或更少球數。 \n 最後是進球能讓籃框移動的機制。 覺得這個很有趣能改變整個投籃機很多的設定。 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};